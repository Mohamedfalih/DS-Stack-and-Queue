#include<iostream>
#include<stdlib.h>
using namespace std;

void stack1();
void Queue1();
void circular_queue();

void push();
void pop();
void display_s();
int isFull_s();
int isEmpty_s();
void peek();

void enqueue_q(int ele);
void dequeue_q();
void display_q();
int isFull_q();
int isEmpty_q();

void enqueue_cq(int ele);
void dequeue_cq();
void display_cq();




int main()
{
    int option;
    cout<<"1.stack\n2.Queue\n3.circular queue\n";
    while(1)
    {
        cout<<"\nOption:  ";
        cin>>option;
        switch(option)
        {
            case 1:stack1();
                break;
                
            case 2:Queue1();
                break;
                
            case 3:circular_queue();
                break;
                
            default: cout<<"Program Terminated!!!\n";
			    exit(0);
                
        }
    }
    return 0;
}
int stack[20];
int top=-1, size_stack=5;

void stack1()
{
	int choice_for_stack;
	cout<<"1.Push\n2.Pop\n3.Display\n4.isFull\n5.isEmpty\n6.Peek\n";
	while(1)
	{
		cout<<"Choice:";
		cin>>choice_for_stack;
		switch(choice_for_stack)
		{
			case 1: push();
					break;
			case 2: pop();
					break;
			case 3: display_s();
					break;
			case 4: if(isFull_s())
						cout<<"Stack is FULL\n";
					else
						cout<<"Stack is NOT FULL\n";
					break;
			case 5: if(isEmpty_s())
						cout<<"Stack is EMPTY\n";
					else
						cout<<"Stack is NOT EMPTY\n";
					break;
			case 6: peek();
					break;
			default: cout<<"Program Terminated!!!\n";
					exit(0);
		}
	}
}
void push()
{
	int element;
	if(top==size_stack-1)
		cout<<"Stack Overflow"<<endl;
	else
	{
		cout<<"Enter the element: ";
		cin>>element;
		stack[++top]=element;
	}
		
}
void pop()
{
	if(top==-1)
		cout<<"Stack Underflow\n";
	else
		cout<<"Popped Element = " <<stack[top--]<<endl;
}
void display_s()
{
	int i;
	if(top==-1)
		cout<<"Stack Empty\n";
	else
	{
		cout<<"Elements: ";
		for(i=top;i>=0;i--)
			cout<<stack[i]<<" ";
		cout<<endl;
	}
}
int isFull_s()
{
 if(top==size_stack-1)
   return 1;
else
  return 0;
}
int isEmpty_s()
{
 if(top==-1)
   return 1;
else
  return 0;
}
void peek()
{
	if(top==-1)
		cout<<"Stack Underflow"<<endl;
	else
 		cout<<"Peek = "<<stack[top];
}

int queue_q[100],size_queue=3;
int front_q=-1,rear_q=-1;


void Queue1()
{
	int choice_for_Queue,ele_q;
	cout<<"1.Enqueue\n2.Dequeue\n3.Display\n4.isFull\n5.isEmpty\n";
	while(1)
	{
		cout<<"Choice:";
		cin>>choice_for_Queue;
		switch(choice_for_Queue)
		{
			case 1: cout<<"Enter the element: ";
					cin>>ele_q;
					enqueue_q(ele_q);
					break;
			case 2: dequeue_q();
					break;
			case 3: display_q();
					break;
			case 4: if(isFull_q()) cout<<"Queue is full\n";
					else cout<<"Queue is not full\n";
					break;
			case 5: if(isEmpty_q()) cout<<"Queue is empty\n";
					else cout<<"Queue is not empty\n";
					break;
			default: cout<<"Program Terminated!!!";
					exit(0);
		}
	}
}
void enqueue_q(int ele_q)
{
	if(rear_q==size_queue-1)
	{
		cout<<"Queue Overflow\n";
		return;
	}
	else if((rear_q==-1)&&(front_q==-1))
		front_q=rear_q=0;
	else
		rear_q=rear_q+1;
	queue_q[rear_q]=ele_q;
}
void dequeue_q()
{
	if(front_q==-1)
		cout<<"Queue Unerflow\n";
	else 
	{
		cout<<"Dequeued Element = "<<queue_q[front_q]<<endl;
		if(front_q==rear_q)
			front_q=rear_q=-1;
		else
			front_q++;
			
	}
}
void display_q()
{
	int i;
	if((rear_q==-1)||(front_q==-1))
		cout<<"Queue Empty\n";
	else
	{
		cout<<"Elements: ";
		for(i=front_q;i<=rear_q;i++)
			cout<<queue_q[i]<<" ";
		cout<<endl;
	}
}
int isFull_q()
{
	if(rear_q==size_queue-1) 
		return 1;
	return 0;
}
int isEmpty_q()
{
	if(front_q==-1) //rear==-1
		return 1;
	return 0;
}




int queue_cq[100],size_cq=3;
int front_cq=-1,rear_cq=-1;

void circular_queue()
{
	int choice_for_Cqueue,ele_cq;
	cout<<"1.Enqueue\n2.Dequeue\n3.Display\n";
	while(1)
	{
		cout<<"Choice:";
		cin>>choice_for_Cqueue;
		switch(choice_for_Cqueue)
		{
			case 1: cout<<"Enter the element: ";
					cin>>ele_cq;
					enqueue_cq(ele_cq);
					break;
			case 2: dequeue_cq();
					break;
			case 3: display_cq();
					break;
			default: cout<<"Program Terminated!!!";
					exit(0);
		}
	}
}
void enqueue_cq(int ele_cq)
{
	if((rear_cq==size_cq-1)&&(front_cq==0))//||(front==rear+1))
		cout<<"Queue Overflow\n";
	else if((rear_cq==-1)&&(front_cq==-1))
		front_cq=rear_cq=0;
	else if((rear_cq==size_cq-1)&&(front_cq!=0))
		rear_cq=0;
	else
		rear_cq=rear_cq+1;
	queue_cq[rear_cq]=ele_cq;
}
void dequeue_cq()
{
	if(front_cq==-1)
		cout<<"Queue Unerflow\n";
	else 
	{
		cout<<"Dequeued Element = "<<queue_cq[front_cq]<<endl;
		if(front_cq==rear_cq)
			front_cq=rear_cq=-1;
		else if(front_cq==size_cq-1)
			front_cq=0;
		else
			front_cq++;
	}
}
void display_cq()
{
	int i;
	if((rear_cq==-1)||(front_cq==-1))
		cout<<"Queue Empty\n";
	else if(rear_cq>=front_cq)
	{
		cout<<"Elements: ";
		for(i=front_cq;i<=rear_cq;i++)
			cout<<queue_cq[i]<<" ";
		cout<<endl;
	}
	else
	{
		cout<<"Elements: ";
		for(i=front_cq;i<size_cq;i++)
			cout<<queue_cq[i]<<"  ";
		for(i=0;i<=rear_cq;i++)
			cout<<queue_cq[i]<<" ";
		cout<<endl;			
	}
}
